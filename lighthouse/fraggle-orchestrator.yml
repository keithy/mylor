name: Fraggle Orchestrator
on:
  #schedule:
  #  - cron: '*/15 * * * *'  # Every 15 minutes
  workflow_dispatch:
    inputs:
      debug:
        description: 'Enable debug output to see horizon view'
        type: boolean
        default: false

jobs:
  fraggle-discovery:
    runs-on: ubuntu-24.04
    env:
      DEBUG: ${{ inputs.debug }}
      HORIZON: lighthouse/horizon.ncl
      LIGHTHOUSE: lighthouse/config/lighthouse.ncl  
      STATE_DIR: .fraggle-state
    outputs:
      build-matrix: ${{ steps.collect-matrix.outputs.matrix }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Restore fraggle states
        uses: actions/cache@v4
        with:
          path: ${{ env.STATE_DIR }}/
          key: fraggle-state-${{ hashFiles('**/watch.ncl', '**/harbour.ncl') }}-${{ github.run_number }}
          restore-keys: |
            fraggle-state-${{ hashFiles('**/watch.ncl', '**/harbour.ncl') }}-
            fraggle-state-

      - name: Install mise and tools
        uses: jdx/mise-action@v2
        with:
          cache: true
          install: |
            nickel@latest

      - name: Debug - Show full horizon
        if: inputs.debug
        run: |
          echo "=== FULL HORIZON VIEW ==="
          nickel eval "$HORIZON"
          echo
          echo "=== LIGHTHOUSE CONFIG ==="
          nickel eval "$LIGHTHOUSE"
          echo

      - name: Run fraggles
        id: run-fraggles
        run: |
          all_matrices='[]'
          
          # Discover and run all fraggle scripts
          while IFS= read -r -d '' fraggle_script; do
            echo "Running fraggle: $fraggle_script"
            
            # Run fraggle (HORIZON env var provides config file)
            fraggle_matrix=$("$fraggle_script")
            
            # Merge with accumulated matrices
            all_matrices=$(echo "$all_matrices" "$fraggle_matrix" | jq -s 'add')
            
            echo "Fraggle $(basename "$fraggle_script") contributed $(echo "$fraggle_matrix" | jq 'length') entries"
          done < <(find lighthouse/fraggles -name "*-fraggle-*.sh" -executable -printf '%f\t%p\0' | sort -z | cut -d$'\t' -f2)
          
          echo "Total matrix entries: $(echo "$all_matrices" | jq 'length')"
          echo "$all_matrices" > fraggle-build-matrix.json

      - name: Sort and prioritize matrix
        id: collect-matrix
        run: |
          # Sort matrix by priority (lower number = higher priority)
          sorted_matrix=$(jq 'sort_by(.priority)' fraggle-build-matrix.json)
          
          # Output for next job
          echo "matrix=$(echo "$sorted_matrix" | jq -c '.')" >> $GITHUB_OUTPUT
          
          # Save sorted matrix for debugging
          echo "$sorted_matrix" | jq '.' > sorted-build-matrix.json
          
          echo "Final sorted matrix:"
          jq '.' sorted-build-matrix.json

      - name: Save fraggle states
        uses: actions/cache/save@v4
        if: always()
        with:
          path: ${{ env.STATE_DIR }}/
          key: fraggle-state-${{ hashFiles('**/watch.ncl', '**/harbour.ncl') }}-${{ github.run_number }}

  trigger-watchman:
    needs: fraggle-discovery
    if: ${{ fromJson(needs.fraggle-discovery.outputs.build-matrix) != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build: ${{ fromJson(needs.fraggle-discovery.outputs.build-matrix) }}
    
    steps:
      - name: Trigger watchman for pipeline
        run: |
          echo "Triggering watchman for pipeline: ${{ matrix.build.pipeline }}"
          echo "Trigger: ${{ matrix.build.trigger }}"
          echo "Priority: ${{ matrix.build.priority }}"
          echo "Details: ${{ toJson(matrix.build) }}"
          
          # TODO: Call watchman workflow with matrix.build context