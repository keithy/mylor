name: Fraggle Orchestrator
on:
  #schedule:
  #  - cron: '*/15 * * * *'  # Every 15 minutes
  workflow_dispatch:

jobs:
  fraggle-discovery:
    runs-on: ubuntu-latest
    outputs:
      build-matrix: ${{ steps.collect-matrix.outputs.matrix }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Restore fraggle states
        uses: actions/cache@v3
        with:
          path: .fraggle-state/
          key: fraggle-state-${{ hashFiles('**/watch.ncl', '**/harbour.ncl') }}-${{ github.run_number }}
          restore-keys: |
            fraggle-state-${{ hashFiles('**/watch.ncl', '**/harbour.ncl') }}-
            fraggle-state-

      - name: Setup mise
        run: |
          curl https://mise.run | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install tools
        run: mise install
        working-directory: lighthouse/mise

      - name: Generate harbour config
        id: harbour-config
        run: |
          # Use lighthouse system to generate complete merged config
          nickel export lighthouse/system.ncl --output json > harbour-system.json
          echo "Generated harbour system config"
        working-directory: .

      - name: Run fraggles
        id: run-fraggles
        run: |
          mkdir -p .fraggle-state
          all_matrices='[]'
          
          # Discover and run all fraggle scripts
          for fraggle_script in lighthouse/fraggle-scripts/fraggle-*.sh; do
            if [[ -x "$fraggle_script" ]]; then
              echo "Running fraggle: $fraggle_script"
              
              # Run fraggle with harbour config as input
              fraggle_matrix=$(cat harbour-system.json | "$fraggle_script")
              
              # Merge with accumulated matrices
              all_matrices=$(echo "$all_matrices" "$fraggle_matrix" | jq -s 'add')
              
              echo "Fraggle $(basename "$fraggle_script") contributed $(echo "$fraggle_matrix" | jq 'length') entries"
            fi
          done
          
          echo "Total matrix entries: $(echo "$all_matrices" | jq 'length')"
          echo "$all_matrices" > fraggle-build-matrix.json

      - name: Sort and prioritize matrix
        id: collect-matrix
        run: |
          # Sort matrix by priority (lower number = higher priority)
          sorted_matrix=$(jq 'sort_by(.priority)' fraggle-build-matrix.json)
          
          # Output for next job
          echo "matrix=$(echo "$sorted_matrix" | jq -c '.')" >> $GITHUB_OUTPUT
          
          # Save sorted matrix for debugging
          echo "$sorted_matrix" | jq '.' > sorted-build-matrix.json
          
          echo "Final sorted matrix:"
          jq '.' sorted-build-matrix.json

      - name: Save fraggle states
        uses: actions/cache/save@v3
        if: always()
        with:
          path: .fraggle-state/
          key: fraggle-state-${{ hashFiles('**/watch.ncl', '**/harbour.ncl') }}-${{ github.run_number }}

  trigger-watchman:
    needs: fraggle-discovery
    if: ${{ fromJson(needs.fraggle-discovery.outputs.build-matrix) != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build: ${{ fromJson(needs.fraggle-discovery.outputs.build-matrix) }}
    
    steps:
      - name: Trigger watchman for pipeline
        run: |
          echo "Triggering watchman for pipeline: ${{ matrix.build.pipeline }}"
          echo "Trigger: ${{ matrix.build.trigger }}"
          echo "Priority: ${{ matrix.build.priority }}"
          echo "Details: ${{ toJson(matrix.build) }}"
          
          # TODO: Call watchman workflow with matrix.build context